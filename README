node-memqueue
============

Synopsis
--------
node-memqueue is a simple Node.js implementation of memqueue over memcache

Author
------
Rajesh Kumar <rajesh@meetrajesh.com>

Coded on
--------
Thursday, 21 November 2013

Usage
-----

var q1 = new memq('testq1');
var q2 = new memq('testq2');
var q3 = new memq('testq3');

a.chain(
    function(next) {
        q1.count(function(count) {
            console.log(count);
            next();
        });
    },
    function(next) {
        q1.is_empty(function(ret) {
            console.log(ret);
            next();
        });
    },
    function(next) {
        var elemsToPush = ['a', 'b', 'c'];
        var pushFunc = function(elem, cb) {
        if (elem) {
            q1.push(elem, function() {
                return pushFunc(elemsToPush.shift(), cb)
            });
        } else {
            return cb();
        }
        };
        pushFunc(elemsToPush.shift(), next);
    },
    function(next) {
        q1.count(function(count) {
            console.log(count);
            next();
        });
    },
    function(next) {
        q1.is_empty(function(ret) {
            console.log(ret);
            next();
        });
    },
    function(next) {
        q1.peek(function(elem) {
            console.log(elem);
            next();
        });
    },
    function(next) {
        q1.pop(function(elem) {
            console.log(elem);
            next();
        });
    },
    function(next) {
        q1.count(function(count) {
            console.log(count);
            next();
        });
    },
    function(next) {
        q1.pop(function(elem) {
            console.log(elem);
            next();
        });
    },
    function(next) {
        q1.push('d', next);
    },
    function(next) {
        q2.push('a2', next);
    },
    function(next) {
        q1.pop(function(elem) {
            console.log(elem);
            next();
        });
    },
    function(next) {
        q1.peek(function(elem) {
            console.log(elem);
            next();
        });
    },
    function(next) {
        q1.pop(function(elem) {
            console.log(elem);
            next();
        });
    },
    function(next) {
        q1.pop(function(elem) {
            console.log(elem);
            next();
        });
    },
    function(next) {
        q1.peek(function(elem) {
            console.log(elem);
            next();
        });
    },
    function(next) {
        q2.pop(function(elem) {
            console.log(elem);
            next();
        });
    },
    function(next) {
        var elemsToPush = ['a', 'b', 'c'];
        var pushFunc = function(elem, cb) {
        if (elem) {
            q3.push(elem, function() {
                return pushFunc(elemsToPush.shift(), cb)
            });
        } else {
            return cb();
        }
        };
        pushFunc(elemsToPush.shift(), next);
    },
    function(next) {
        q3.count(function(count) {
            console.log(count);
            next();
        });
    },
    function(next) {
        q3.del(function() {
            q3.count(function(count) {
                console.log(count);
                next();
            });
        });
    },
    function(next) {
        memc.end();
        next();
    }
);

